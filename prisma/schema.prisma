generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  role              Role      @default(READER)
  status            Status    @default(PENDING)
  birthDate         DateTime?
  gender            Gender?
  imageUrl          String?
  publicId          String?
  isVerified        Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetExpires      DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  sessions         Session[]
  newsAuthored     News[]          @relation("NewsAuthor")
  newsEdited       News[]          @relation("NewsEditor")
  likesDislikes    LikesDislikes[]
  savedNews        SavedNews[]
  comments         Comment[]
  userRequests     UserRequest[]   @relation("UserRequestUser")
  reviewedRequests UserRequest[]   @relation("UserRequestReviewedBy")
}

model Session {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  refreshToken String 
  userAgent    String?
  ipAddress    String?
  isValid      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model News {
  id           String     @id @default(uuid())
  title        String
  content      String
  imageUrl     String?
  publicId     String?
  categoryId   String?
  category     Category?  @relation(fields: [categoryId], references: [id])
  author       User       @relation(name: "NewsAuthor", fields: [authorId], references: [id])
  authorId     String
  editor       User?      @relation(name: "NewsEditor", fields: [editorId], references: [id])
  editorId     String?
  status       NewsStatus @default(DRAFT)
  rejectReason String?
  views        NewsView[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  likesDislikes LikesDislikes[]
  savedNews     SavedNews[]
  comments      Comment[]
}

model NewsView {
  id        String   @id @default(uuid())
  news      News     @relation(fields: [newsId], references: [id])
  newsId    String
  ipAddress String
  createdAt DateTime @default(now())

  @@unique([newsId, ipAddress])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  news News[]
}

model LikesDislikes {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  news      News         @relation(fields: [newsId], references: [id])
  newsId    String
  type      ReactionType
  createdAt DateTime     @default(now())
}

model SavedNews {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  news      News     @relation(fields: [newsId], references: [id])
  newsId    String
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  news      News     @relation(fields: [newsId], references: [id])
  newsId    String
  content   String
  createdAt DateTime @default(now())
}

model UserRequest {
  id            String        @id @default(uuid())
  user          User          @relation(name: "UserRequestUser", fields: [userId], references: [id])
  userId        String
  roleRequested RoleRequested
  portfolio     String
  status        Status        @default(PENDING)
  rejectReason  String?
  reviewedBy    User?         @relation(name: "UserRequestReviewedBy", fields: [reviewedById], references: [id])
  reviewedById  String?
  reviewedAt    DateTime?
}

enum Role {
  ADMIN
  JURNALIS
  READER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  SUSPENED
}

enum Gender {
  MALE
  FEMALE
}

enum NewsStatus {
  DRAFT
  REVIEW
  PUBLISHED
  UNPUBLISHED
  REJECTED
}

enum ReactionType {
  LIKE
  DISLIKE
}

enum RoleRequested {
  JURNALIS
  EDITOR
}
